import java.util.ArrayList;
import java.util.List;

public class test {

	public static String[] convertWordArray(String str) {
		str = str.toLowerCase();
		String test[] = str.split(" ");
		return test;
	}
	
	
	public static void findRepetitiveWordsinString(String str) {
		str = "this is a test this is not a test test is a bug that can not be repeated as bug ever and never";
		str = str.toLowerCase();
		String test[] = str.split(" ");
//		String temp[] = test.clone();
		int len = test.length;
		int count;
		List<Integer> l = new ArrayList<>();

		for (int i = 0; i < len; i++) {
			count = 1;
			for (int j = i + 1; j < len; j++) {
				if (test[i].equals(test[j])) {
					count++;
					test[j] = "0";
				}
			}
			if (count > 1 && test[i] != "0") {
				System.out.println(test[i]);

				l.add(i);
			}
		}
		System.out.println(l);
		String uniq[] = new String[l.size()];
		for (int i = 0; i < l.size(); i++) {
			uniq[i] = test[l.get(i)];
		}
		System.out.println(uniq.length);
	}

	public static void countMatches(String a[], String b[]) {
		int count;
		for (int i = 0; i < a.length; i++) {
			count = 0;
			for (int j = 0; j < b.length; j++) {
				if (a[i].equals(b[j]))
					count++;
			}
			if (count > 1) {
				System.out.println("Repeating word is: " + a[i] + "  and the repeating count is " + count);
			}
		}
	}

	public static void main(String[] args) {
		String str = "this is a test this is not a test test is a bug that can not be repeated as bug ever and never";
		String test[] = str.split(" ");
		String temp[] = test.clone();
		int len = test.length;
		int count;
		List<Integer> l = new ArrayList<>();

		for (int i = 0; i < len; i++) {
			count = 1;
			for (int j = i + 1; j < len; j++) {
				if (test[i].equals(test[j])) {
					count++;
					test[j] = "0";
				}
			}
			if (count > 1 && test[i] != "0") {
				System.out.println(test[i]);

				l.add(i);
			}
		}
		System.out.println(l);
		String uniq[] = new String[l.size()];
		for (int i = 0; i < l.size(); i++) {
			uniq[i] = test[l.get(i)];
		}
		System.out.println(uniq.length);
		countMatches(uniq, temp);
	}
}
